# Python 开发规范

## 核心原则
- KISS原则: Keep It Simple Stupid
  - 写最简单的代码,不要过度设计
  - 保持代码容易理解和维护
  - 让其他人或AI能够轻松理解
- 单一职责
  - 一个文件一个模块
  - 每个模块只做最简单的功能
  - 每个类/函数职责明确
- 渐进式开发
  - 小步迭代,避免大动作
  - 先搭建框架,再完善细节
  - 保持代码可测试性

## 项目结构
- 目录组织
  - 源码、测试、文档、配置分离
  - 使用 README.md 说明功能
  - 使用 diagrams/ 存放架构图
  - 不过度嵌套目录结构
- 依赖管理
  - 使用 venv 管理虚拟环境(.venv目录)
  - 使用 .env 管理配置和密钥
  - 使用 .gitignore 管理版本控制
  - 遵循依赖注入原则

## 编码规范
- 代码质量
  - 所有文件必须有类型注解
  - 所有函数/类必须有文档字符串(PEP 257)
  - 使用 Ruff 保持代码风格
  - 保留现有注释
- 数据处理
  - 使用 dataclass 定义数据结构
  - 使用 pydantic 进行数据验证
  - 使用 lru_cache 缓存计算结果
- 异步和错误处理
  - 使用 async/await 处理异步
  - 统一的日志记录方式
  - 合理的错误处理和上下文

## 测试规范
- 测试组织
  - 测试目录命名为 ./xxx_tests
  - 按模块名组织测试文件
  - 创建必要的 __init__.py
- 测试编写
  - 只使用 pytest 及其插件
  - 所有测试需要类型注解和文档
  - 使用 fixtures 复用资源
  - 使用 parametrize 参数化测试
  - 使用 mock 模拟外部依赖
- 测试入口
  - 简单测试放在 __main__
  - 复杂测试放在 pytest
  - 通过 __main__ 提供快速验证

## 设计模式
- 处理器模式
  - 业务逻辑层只负责流程编排
  - 复杂逻辑下沉到处理器
  - 底层处理器独立可测
- 工作空间
  - 通过 md_info 共享上下文
  - 工作空间隔离保证安全
  - 避免直接修改原始文件
- 常用模式
  - 工厂模式创建对象
  - 策略模式处理算法变体
  - 观察者模式处理事件
  - 装饰器模式扩展功能

## 最佳实践
- 代码优化
  - 使用异步提高性能
  - 合理使用缓存
  - 监控性能和内存
- 代码维护
  - 定期代码审查
  - 持续重构改进
  - 保持代码可测试性
- AI友好
  - 类型注解要合理但不过度
  - 保持代码结构清晰
  - 优化代码以适应AI辅助开发 

# Python 模块导入规则

## 核心规则
1. **环境初始化优先**
   - 在文件顶部执行 `load_env()`
   - 这样确保了项目根目录被正确识别
   - 后续所有模块导入都基于此根目录

2. **模块独立可运行**
   - 每个核心模块都应有 `__main__` 测试入口
   - 依赖规则1的环境初始化
   - 可以直接从项目根目录运行测试
   - 这里是**重点**, 每个重要模型单独可以调试容易让AI理解实际的输入/输出来判断问题。

3. **使用绝对路径导入**
   - 从项目根目录开始的完整导入路径
   - 不使用 `.` 或 `..` 的相对导入
   - 避免模块位置变动导致的导入错误

这三条规则相互支撑：
- `load_env()` 为绝对路径导入提供基础
- 绝对路径导入保证模块独立运行
- 模块独立运行验证前两条规则的正确性 

# README 编写规范

## 核心原则
1. **深入代码分析**
   - 必须先读懂核心代码实现
   - 提取关键技术特性和创新点
   - 不写泛泛而谈的内容

2. **实用导向**
   - 从问题出发设计导航
   - 直指关键函数和特性
   - 给出完整的代码示例

3. **突出重点**
   - 核心功能放在前面
   - 配置信息集中展示
   - 性能指标明确列出

## 标准结构
1. **快速导航**
   - 关键文件索引(文件名+一句话说明核心功能)
   - 按功能查找(具体问题指向具体解决方案)

2. **系统设计**
   - 核心特性(带代码示例)
   - 关键配置(环境变量、推荐参数)

3. **核心功能**
   - 典型用例代码
   - 参数说明
   - 注意事项

4. **最佳实践**
   - 错误处理建议
   - 性能优化指南
   - 开发建议

## 编写要求
1. **代码示例**
   - 必须是可直接运行的代码
   - 包含关键参数说明
   - 展示典型使用场景

2. **配置说明**
   - 环境变量完整列举
   - 参数推荐值说明
   - 性能指标基准


4. **格式规范**
   - 使用 Markdown 标准语法
   - 代码块指定语言
   - 层级结构清晰 

## 渐进式修改原则 - 不断尝试修正代码的时候

1. **步步为营**
   - 每次只修改一个关键点
   - 修改后必须验证效果
   - 保持其他部分的稳定性

2. **修改策略**
   - 从抽象到具体
   - 从通用到特殊
   - 优先使用补充而不是替换

3. **验证流程**
   - 每次修改后运行测试
   - 对比修改前后的行为变化
   - 确认没有引入意外的副作用

4. **最佳实践**
   - 在已有结构中找到合适的位置添加内容
   - 保持原有的抽象层次
   - 新增内容要与上下文保持一致的表达方式

5. **常见错误**
   - 一次性修改过多内容
   - 改变现有的抽象层次
   - 没有验证修改的效果