---
description: 规范项目目录结构和模块划分，确保代码组织清晰，便于维护和扩展
globs: 
alwaysApply: false
---

# 项目结构规范

## 核心原则宣言

⚡️ 核心问题：项目结构不合理导致代码难以理解、维护和扩展。

💥 不遵循的后果：
- 代码职责不清晰，模块间耦合度高
- 开发者理解成本高，新人难以快速上手
- 扩展新功能需要大幅改动现有代码
- 测试难以隔离，单元测试覆盖率低

💎 遵循的收益：
- 代码组织清晰，功能模块化
- 新人快速理解项目结构，提高开发效率
- 降低模块间耦合，便于功能扩展
- 便于编写高质量的单元测试

⚖️ 需要权衡：
- 权衡点1：过度模块化 VS 过度集中
- 权衡点2：通用性 VS
 特定业务逻辑
- 权衡点3：结构一致性 VS 灵活性

## 关键实践

### 实践一：清晰的目录结构

为什么需要这样做：
清晰的目录结构使项目易于理解和维护，减少开发者的认知负担。

❌ 常见错误：
```
project/
  |- file1.py
  |- file2.py
  |- helpers.py
  |- utils.py
  |- test.py
```

✅ 正确做法：
```
project/
  |- core/           # 核心业务逻辑
  |    |- __init__.py
  |    |- models.py
  |    |- services.py
  |
  |- api/            # API层
  |    |- __init__.py
  |    |- endpoints.py
  |
  |- utils/          # 通用工具函数
  |    |- __init__.py
  |    |- helpers.py
  |
  |- tests/          # 测试代码
       |- __init__.py
       |- test_models.py
       |- test_services.py
```

🔄 重构路径：
1. 识别现有代码的功能分类
2. 创建合适的目录结构
3. 逐步迁移代码到新结构
4. 确保导入路径和依赖关系正确更新

### 实践二：模块的单一职责

为什么需要这样做：
每个模块只负责单一功能，降低模块间耦合，提高代码可维护性。

❌ 常见错误：
```python
# user_manager.py包含了用户、权限、日志等多种功能
class UserManager:
    def create_user(self): pass
    def login_user(self): pass
    def check_permission(self): pass
    def log_activity(self): pass
    def generate_report(self): pass
```

✅ 正确做法：
```python
# user_service.py
class UserService:
    def create_user(self): pass
    def login_user(self): pass

# permission_service.py
class PermissionService:
    def check_permission(self): pass

# logging_service.py
class LoggingService:
    def log_activity(self): pass

# reporting_service.py
class ReportingService:
    def generate_report(self): pass
```

🔄 重构路径：
1. 识别类/模块中的不同职责
2. 按职责拆分为多个类/模块
3. 重构依赖关系
4. 优化接口设计

## 决策指导

🌲 决策树：
1. 判断是否需要新建模块
   - 功能与现有模块高度相关 -> 考虑扩展现有模块
   - 功能独立或有明显界限 -> 创建新模块
2. 判断模块放置位置
   - 核心业务逻辑 -> core/
   - API接口相关 -> api/
   - 通用工具函数 -> utils/
   - 数据模型定义 -> models/
   - 配置相关 -> config/
3. 判断模块内部结构
   - 功能简单 -> 单文件
   - 功能复杂 -> 目录+多文件

📊 方案对比：
| 方案 | 适用场景 | 优势 | 劣势 | 注意事项 |
|-----|---------|-----|-----|---------|
| 按功能划分 | 业务逻辑清晰 | 模块职责清晰 | 可能重复代码 | 防止循环依赖 |
| 按层级划分 | 复杂系统 | 分层清晰 | 跨层变更复杂 | 保持层间接口稳定 |
| 微服务划分 | 大规模系统 | 独立部署、扩展 | 服务间通信复杂 | 服务边界定义 |

## Checklist

#### 创建项目阶段
- [ ] 项目根目录是否包含必要的配置文件(README.md, requirements.txt等)
      判断标准：存在基本配置文件并包含正确信息
      快速修复：添加缺失的配置文件及文档

- [ ] 是否建立了清晰的目录结构
      判断标准：目录结构符合实践示例，且每个目录有明确用途
      快速修复：按功能划分创建核心目录

- [ ] 是否有适当的包初始化文件(__init__.py)
      判断标准：每个Python包目录下都有__init__.py文件
      快速修复：在缺少的目录中添加__init__.py文件

#### 开发阶段
- [ ] 新功能是否放在正确的模块中
      判断标准：功能放置符合模块职责划分
      快速修复：将功能移至合适模块，并更新import语句

- [ ] 模块间依赖是否合理
      判断标准：无循环依赖，依赖层次清晰
      快速修复：重构异常依赖，使用依赖注入等方式解耦

- [ ] 是否遵循模块的单一职责原则
      判断标准：每个模块只负责单一功能领域
      快速修复：拆分多职责模块为多个单一职责模块

#### 重构阶段
- [ ] 重构是否维持了项目结构的一致性
      判断标准：重构后的代码符合既定的项目结构规范
      快速修复：调整变更以符合项目结构规范

- [ ] 是否正确处理了模块迁移后的导入关系
      判断标准：所有导入路径正确更新，无导入错误
      快速修复：系统性检查并更新所有import语句 