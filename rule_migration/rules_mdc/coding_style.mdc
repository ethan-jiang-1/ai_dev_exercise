---
description: 统一Python代码风格和最佳实践，提高代码可读性和一致性
globs: *.py
alwaysApply: false
---

# 代码风格规范

## 核心原则宣言

⚡️ 核心问题：不一致的代码风格降低了可读性，增加了维护成本和协作难度。

💥 不遵循的后果：
- 代码难以阅读和理解
- 团队协作效率低下
- 更容易引入错误
- 代码审查困难

💎 遵循的收益：
- 提高代码可读性和可维护性
- 减少沟通成本和认知负担
- 便于代码审查和质量控制
- 降低新成员的上手难度

⚖️ 需要权衡：
- 权衡点1：严格遵循 VS 灵活应用
- 权衡点2：简洁代码 VS 明确表达
- 权衡点3：一致性 VS 特殊场景需求

## 关键实践

### 实践一：命名规范

为什么需要这样做：
良好的命名能直观表达意图，减少理解负担，提高代码可读性。

❌ 常见错误：
```python
# 混乱的命名风格
class userManager:
    def GET_USER(self, u_id):
        pass
    
    def Add_new_user(self, userData):
        pass
    
tmpVar = 10
```

✅ 正确做法：
```python
# 一致的命名风格
class UserManager:
    def get_user(self, user_id):
        pass
    
    def add_new_user(self, user_data):
        pass
    
temp_var = 10
```

🔄 重构路径：
1. 识别不符合规范的命名
2. 使用IDE的重命名功能统一修改
3. 更新相关引用
4. 检查是否有遗漏或错误

### 实践二：代码格式与组织

为什么需要这样做：
统一的格式和合理的组织结构能提高代码的可读性和可维护性。

❌ 常见错误：
```python
# 格式混乱的代码
def process_data(data,flag = True):
  result=[]
  for item in data:
    if flag==True:
       processed=item*2
    else:
        processed=item
    result.append(processed)
  return result
```

✅ 正确做法：
```python
# 格式清晰的代码
def process_data(data, flag=True):
    """处理数据，根据flag决定是否翻倍处理。
    
    Args:
        data: 要处理的数据列表
        flag: 是否翻倍处理
        
    Returns:
        处理后的数据列表
    """
    result = []
    for item in data:
        if flag:
            processed = item * 2
        else:
            processed = item
        result.append(processed)
    return result
```

🔄 重构路径：
1. 使用自动格式化工具（如Black, yapf, autopep8）
2. 添加缺失的文档注释
3. 规范空白和缩进
4. 简化冗余代码

## 决策指导

🌲 决策树：
1. 命名选择
   - 是类或类型 -> 使用 CapWords (UserProfile)
   - 是函数或变量 -> 使用小写加下划线 (get_user_data)
   - 是常量 -> 使用大写加下划线 (MAX_RETRY_COUNT)
   - 是私有成员 -> 前缀单下划线 (_private_method)
   
2. 风格选择
   - 新项目 -> 严格遵循PEP 8
   - 现有项目 -> 遵循项目已有风格
   - 开源贡献 -> 遵循项目贡献指南

3. 文档注释
   - 公共API -> 完整文档（功能、参数、返回值、异常）
   - 内部函数 -> 简明注释说明意图
   - 复杂算法 -> 详细解释实现原理和考量

📊 方案对比：
| 工具 | 优势 | 劣势 | 适用场景 |
|-----|-----|-----|---------|
| Black | 零配置，风格统一 | 不灵活 | 新项目，团队协作 |
| yapf | 高度可配置 | 配置复杂 | 有特殊格式需求的项目 |
| flake8 | 检查风格和潜在错误 | 不自动修复 | 持续集成，代码审查 |

## Checklist

#### 编写代码阶段
- [ ] 命名是否符合规范
      判断标准：类使用CapWords，函数和变量使用小写下划线，常量使用大写
      快速修复：使用IDE重命名功能

- [ ] 代码格式是否一致
      判断标准：缩进、空格、行长度符合规范
      快速修复：使用自动格式化工具（Black/yapf）

- [ ] 注释是否清晰有效
      判断标准：复杂函数有docstring，解释清晰
      快速修复：添加符合规范的文档注释

#### 代码审查阶段
- [ ] 是否有不必要的复杂性
      判断标准：函数简洁，职责单一，无重复代码
      快速修复：提取公共逻辑为函数，简化复杂表达式

- [ ] 是否遵循项目的特定风格指南
      判断标准：与项目现有代码风格一致
      快速修复：调整代码以匹配项目风格

- [ ] 是否通过了自动化风格检查
      判断标准：无linter警告
      快速修复：根据警告信息逐项修复

#### 重构阶段
- [ ] 新旧代码风格是否一致
      判断标准：重构后的代码与周围代码风格一致
      快速修复：应用相同的风格规则

- [ ] 重构是否保持了原有的语义
      判断标准：功能和行为不变
      快速修复：添加测试确保行为一致 