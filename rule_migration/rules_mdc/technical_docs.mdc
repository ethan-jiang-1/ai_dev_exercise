---
description: 技术文档,  设计文档, 思考推敲文档
globs: 
alwaysApply: false
---
# 技术文档规范

## 核心原则宣言

⚡️ 核心问题：如何编写高质量的技术文档，确保团队成员能够快速理解系统架构、实现细节和技术决策

💥 不遵循的后果：
- 知识传递效率低,新成员上手时间长
- 系统维护困难,bug修复成本高
- 技术债务积累,重构风险增加
- 团队协作成本高,开发效率下降
- 系统知识过度依赖个人,人员变动风险大

💎 遵循的收益：
- 加速团队学习和知识共享
- 提高系统可维护性和可扩展性
- 降低技术决策成本和错误率
- 促进知识沉淀和技术传承
- 减少重复开发和技术探索成本

⚖️ 需要权衡：
- 权衡点1：文档完整性 VS 维护成本
- 权衡点2：标准化规范 VS 灵活性
- 权衡点3：文档粒度 VS 实用性

## 关键实践

### 实践一：架构文档规范

为什么需要这样做：
清晰的架构文档能帮助团队成员理解系统整体设计,减少错误决策,加速开发和维护。

❌ 常见错误：
```
# 系统架构
我们的系统使用了微服务架构,包含用户服务、订单服务和支付服务,
使用MySQL存储数据,Redis做缓存。
```

✅ 正确做法：
```
# 系统架构设计

## 1. 架构概览
[系统架构图]

我们采用基于领域驱动设计(DDD)的微服务架构,系统由以下核心服务组成:

- **用户服务**: 负责用户注册、认证和授权
- **订单服务**: 处理订单创建、修改和查询
- **支付服务**: 集成支付网关,处理支付流程
- **通知服务**: 负责消息推送和邮件通知

## 2. 技术选型
- 服务开发框架: Spring Boot 2.5.x
- 服务间通信: gRPC + Kafka Event Stream
- 数据存储: MySQL 8.0 (主数据) + MongoDB 4.4 (日志和分析)
- 缓存: Redis 6.x (集群模式)
- 服务发现: Kubernetes + Istio
- 监控: Prometheus + Grafana
- CI/CD: Jenkins + Docker + Harbor

## 3. 关键架构决策
| 决策                | 原因                                        | 替代方案           | 决策日期  |
|---------------------|---------------------------------------------|-------------------|-----------|
| 采用微服务架构       | 支持业务快速迭代,便于团队并行开发           | 单体架构           | 2022-01-15|
| 选择MySQL作为主数据库| 团队熟悉度高,事务支持好,生态成熟            | PostgreSQL        | 2022-01-15|
| 使用Kafka作为消息队列| 高吞吐、低延迟,支持事件溯源                 | RabbitMQ          | 2022-01-20|

## 4. 数据流图
[数据流转图]

## 5. 扩展策略
[系统扩容方案说明]
```

🔄 重构路径：
1. 添加系统架构图和核心组件说明
2. 补充技术选型和决策理由
3. 增加数据流图表和扩展策略
4. 定期更新架构文档以反映最新变更

### 实践二：实现细节规范

为什么需要这样做：
详细的实现文档能减少代码理解成本,加速问题排查,提高系统维护效率。

❌ 常见错误：
```
// 缺乏说明的复杂算法
function processData(data) {
  // 这里是一段复杂的算法,处理数据并返回结果
  let result = [];
  // 省略100行复杂逻辑
  return result;
}
```

✅ 正确做法：
```
/**
 * # 数据处理算法说明
 * 
 * ## 算法概述
 * 该算法实现了一种改进的归并排序,用于高效处理大规模交易数据。
 * 
 * ## 核心步骤
 * 1. 数据预处理: 清洗输入数据并验证格式
 * 2. 分区处理: 将数据分为N个时间窗口批次
 * 3. 并行排序: 对每个批次使用多线程并行排序
 * 4. 归并合并: 合并已排序的批次数据
 * 5. 结果验证: 确保最终结果满足一致性要求
 * 
 * ## 性能特性
 * - 时间复杂度: O(n log n)
 * - 空间复杂度: O(n)
 * - 内存优化: 使用滑动窗口减少内存占用
 * 
 * ## 关键优化点
 * 1. 使用自适应分区策略减少大量小批次合并开销
 * 2. 引入缓存机制避免重复计算
 * 3. 采用二级索引加速查找操作
 * 
 * ## 注意事项
 * - 输入数据量超过10M时建议增大JVM堆内存
 * - 处理实时数据时应设置较小的批次大小
 */
function processData(data) {
  // 实现细节...
}
```

🔄 重构路径：
1. 为复杂算法添加详细说明文档
2. 补充数据结构设计和处理流程
3. 记录性能测试结果和优化措施
4. 添加操作限制和注意事项

### 实践三：运维文档规范

为什么需要这样做：
规范的运维文档能提高系统稳定性,减少故障处理时间,降低运维成本。

❌ 常见错误：
```
# 部署步骤
1. 从Git拉取代码
2. 编译打包
3. 部署到服务器
4. 启动服务
```

✅ 正确做法：
```
# 系统部署指南

## 环境要求
- 操作系统: CentOS 7.9+ / Ubuntu 20.04 LTS+
- JDK: OpenJDK 11.0.12+
- 内存: 最小8GB,推荐16GB
- 磁盘: 系统盘50GB,数据盘200GB(SSD)
- 网络: 内网带宽1Gbps+

## 详细部署步骤
1. **准备环境**
   ```bash
   # 安装JDK
   sudo apt update
   sudo apt install -y openjdk-11-jdk
   
   # 验证安装
   java -version
   # 应输出OpenJDK 11.0.x
   ```

2. **获取部署包**
   ```bash
   # 方式一:从企业制品库下载(推荐)
   curl -u ${USERNAME}:${PASSWORD} -O https://artifacts.company.com/releases/app-service-1.5.0.jar
   
   # 方式二:从源码构建
   git clone https://git.company.com/app-service.git
   cd app-service
   ./gradlew clean bootJar
   cp build/libs/app-service-1.5.0.jar ~/deploy/
   ```

3. **配置服务**
   - 创建配置文件`application-prod.yml`:
     ```yaml
     spring:
       datasource:
         url: jdbc:mysql://db.example.com:3306/app_db
         username: ${DB_USER}
         password: ${DB_PASS}
     # ... 其他配置
     ```
   
4. **启动服务**
   ```bash
   java -Xms4g -Xmx8g -jar app-service-1.5.0.jar --spring.profiles.active=prod
   ```

5. **验证部署**
   ```bash
   # 检查服务状态
   curl -s http://localhost:8080/actuator/health | jq
   
   # 预期输出:
   # {
   #   "status": "UP",
   #   "components": {
   #     "db": {
   #       "status": "UP"
   #     },
   #     "redis": {
   #       "status": "UP"
   #     }
   #   }
   # }
   ```

## 故障排查
| 错误现象               | 可能原因                      | 解决方案                               |
|------------------------|-------------------------------|----------------------------------------|
| 服务无法启动           | 配置文件错误或缺失           | 检查配置文件路径和权限                 |
| 数据库连接失败         | 网络问题或凭证错误           | 验证网络连通性和数据库账号密码         |
| 内存溢出(OOM)          | JVM堆内存配置不足            | 增加-Xmx参数值,检查内存泄漏           |

## 监控指标
- CPU使用率: 正常<60%,警告>70%,严重>85%
- 内存使用率: 正常<70%,警告>80%,严重>90%
- API平均响应时间: 正常<100ms,警告>200ms,严重>500ms
- 错误率: 正常<0.1%,警告>0.5%,严重>1%
```

🔄 重构路径：
1. 详细记录环境要求和准备步骤
2. 提供精确的命令和配置示例
3. 补充完整的故障排查指南
4. 添加关键监控指标和告警阈值

## 决策指导

### 文档详细度判断
1. 必须详细说明：
   - 核心业务逻辑及其实现原理
   - 关键技术方案和架构决策
   - 重要设计决策及其背景
   - 系统瓶颈点和优化措施
   - 安全机制和数据保护策略
   - 错误处理和容错机制

2. 可以简略说明：
   - 通用组件使用方法
   - 标准配置过程
   - 常规维护任务
   - 基础工具说明
   - 非核心功能实现

### 文档形式判断
1. 需要图表说明：
   - 系统架构设计
   - 数据流转过程
   - 复杂业务流程
   - 性能监控数据
   - 组件交互关系
   - 状态转换逻辑

2. 适合文字说明：
   - 接口使用说明
   - 配置项含义
   - 常见问题解答
   - 注意事项提醒
   - 部署步骤说明
   - 参数解释说明

## Checklist

### 文档基础检查
- [ ] 文档结构完整
      判断标准：包含必要的章节，层次分明
      快速修复：补充缺失章节，调整结构

- [ ] 更新时间记录
      判断标准：标注最后更新时间，记录变更历史
      快速修复：添加更新记录

- [ ] 文档分类合理
      判断标准：文档类型和内容匹配，便于查找
      快速修复：调整文档分类

### 内容质量检查
- [ ] 技术准确性
      判断标准：技术描述准确，术语使用正确
      快速修复：校对技术内容，更正错误

- [ ] 图表规范性
      判断标准：图表清晰，标注完整，格式一致
      快速修复：优化图表展示，统一格式规范

- [ ] 实操可行性
      判断标准：操作步骤清晰，可直接执行
      快速修复：补充操作细节，验证执行结果

### 维护性检查
- [ ] 版本对应关系
      判断标准：文档版本与代码版本一致
      快速修复：更新版本信息，同步文档内容

- [ ] 依赖关系说明
      判断标准：清晰说明系统依赖和版本要求
      快速修复：补充依赖说明，确保版本匹配

- [ ] 变更通知机制
      判断标准：重要变更有通知机制
      快速修复：建立变更通知流程，确保文档及时更新 